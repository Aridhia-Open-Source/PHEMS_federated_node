{{- define "baseUrl" }}
{{- if not .Values.local_development -}}
https://{{ .Values.ingress.host }}
{{- else -}}
http://backend.{{ .Release.Namespace }}.svc:{{ .Values.federatedNode.port }}
{{- end -}}
{{- end }}

{{- define "authEnv" }}
env:
- name: KEYCLOAK_ADMIN_PASSWORD
  valueFrom:
    secretKeyRef:
      name: kc-secrets
      key: KEYCLOAK_ADMIN_PASSWORD
- name: BACKEND_URL
  value: {{ include "baseUrl" . }}
envFrom:
  - configMapRef:
      name: keycloak-config
{{- end }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: smoketest-cm
  namespace: {{ .Release.Namespace }}
data:
  tests.sh: |
{{ .Files.Get "scripts/tests.sh" | indent 4 }}

---
apiVersion: v1
kind: Pod
metadata:
  name: "{{ .Release.Name }}-test-connection"
  namespace: {{ .Release.Namespace }}
  annotations:
    helm.sh/hook: test
spec:
  containers:
    - name: run-smoketests
      image: {{ include "test-image" . }}
      command: ['/usr/bin/tests.sh']
      {{- include "authEnv" . | indent 6 }}
      volumeMounts:
        - name: tests
          mountPath: /usr/bin/tests.sh
          subPath: tests.sh
  volumes:
    - name: tests
      configMap:
        name: smoketest-cm
        defaultMode: 0777
        items:
        - key: tests.sh
          path: tests.sh
  restartPolicy: Never
---
apiVersion: v1
kind: Pod
metadata:
  name: "{{ .Release.Name }}-test-cleanup"
  namespace: {{ .Release.Namespace }}
  annotations:
    helm.sh/hook: test
    helm.sh/hook-weight: "3"
spec:
  containers:
    - name: cleanup
      image: {{ include "test-image" . }}
      command: ['/bin/sh', '-c']
      args:
        - |
          TOKEN=$(curl http://keycloak.{{ .Values.namespaces.keycloak }}.svc/realms/FederatedNode/protocol/openid-connect/token \
            --header "Content-Type: application/x-www-form-urlencoded" \
            --data-urlencode "grant_type=password" \
            --data-urlencode "username=${KEYCLOAK_ADMIN}" \
            --data-urlencode "password=${KEYCLOAK_ADMIN_PASSWORD}" \
            --data-urlencode "client_id=admin-cli" | jq -r '.access_token')

          echo "Removing test user"
          USER_ID=$(curl http://keycloak.{{ .Values.namespaces.keycloak }}.svc/admin/realms/FederatedNode/users?email=testuser@phems.com \
            --header "Authorization: Bearer ${TOKEN}" | jq -r '.[].id')
          if [[ -z "$USER_ID" ]]; then
            echo "User not found. Exiting"
            exit 0
          fi
          echo "Found user ${USER_ID}"

          curl --request DELETE http://keycloak.{{ .Values.namespaces.keycloak }}.svc/admin/realms/FederatedNode/users/${USER_ID} \
            --header "Authorization: Bearer ${TOKEN}" | jq

      {{- include "authEnv" . | indent 6 }}
  restartPolicy: Never
