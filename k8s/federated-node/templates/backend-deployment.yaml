apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend
  namespace: {{ .Release.Namespace }}
  labels:
    app: flask
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      app: flask
  template:
    metadata:
      annotations:
        rollme: {{ template "rollMe" . }}
      labels:
        app: flask
    spec:
      serviceAccountName: secret-backend-handler
      initContainers:
        {{ template "createDBInitContainer" . }}
          - name: NEW_DB
            valueFrom:
              configMapKeyRef:
                name: backend-configmap
                key: PGDATABASE
        - name: db-migrations
          image: {{ template "backend-image" . }}:{{ .Values.backend.tag | default .Chart.AppVersion }}
          command: ["/bin/sh"]
          workingDir: /
          {{ include "nonRootSC" . }}
          args:
            [
              "-c",
              'python -m alembic upgrade head'
            ]
          envFrom:
            - configMapRef:
                name: backend-configmap
            {{ if .Values.db.configMap }}
            - configMapRef:
                name: {{ .Values.db.configMap }}
            {{ end }}
          env:
          - name: PGPASSWORD
            valueFrom:
              secretKeyRef:
                name: {{.Values.db.secret.name}}
                key: {{.Values.db.secret.key}}
      containers:
        - image: {{ template "backend-image" . }}:{{ .Values.backend.tag | default .Chart.AppVersion }}
          name: backend
          imagePullPolicy: {{ .Values.pullPolicy }}
          {{ include "nonRootSC" . }}
          resources:
            limits:
              memory: 200Mi
              cpu: 100m
          ports:
            - name: http
              containerPort: {{ .Values.federatedNode.port }}
              protocol: TCP
          readinessProbe:
            httpGet:
              path: /ready_check
              port: http
            initialDelaySeconds: 30
            periodSeconds: 180
            timeoutSeconds: 30
          livenessProbe:
            httpGet:
              path: /health_check
              port: http
            initialDelaySeconds: 10
            periodSeconds: 60
            timeoutSeconds: 30
          envFrom:
            - configMapRef:
                name: backend-configmap
            {{ if .Values.db.configMap }}
            - configMapRef:
                name: {{ .Values.db.configMap }}
            {{ end }}
            - configMapRef:
                name: keycloak-config
          env:
          - name: RESULTS_PATH
            value: {{ .Values.federatedNode.volumes.results_path }}
          - name: TASK_POD_RESULTS_PATH
            value: {{ .Values.federatedNode.volumes.task_pod_results_path }}
          - name: PGPASSWORD
            valueFrom:
              secretKeyRef:
                name: {{.Values.db.secret.name}}
                key: {{.Values.db.secret.key}}
          - name: KEYCLOAK_SECRET
            valueFrom:
              secretKeyRef:
                name: kc-secrets
                key: KEYCLOAK_GLOBAL_CLIENT_SECRET
          - name: KEYCLOAK_ADMIN_PASSWORD
            valueFrom:
              secretKeyRef:
                name: kc-secrets
                key: KEYCLOAK_ADMIN_PASSWORD
          volumeMounts:
            - name: respv
              mountPath: {{ .Values.federatedNode.volumes.results_path }}
            - name: cr-list
              mountPath: /app/registries/
      imagePullSecrets:
        - name: {{ .Values.imagePullSecrets }}
      volumes:
        - name: respv
          persistentVolumeClaim:
            claimName: flask-results-pv-volclaim
        - name: cr-list
          secret:
            secretName: backend-cr-config-secret
            items:
            - key: registries-list.json
              path: registries-list.json
