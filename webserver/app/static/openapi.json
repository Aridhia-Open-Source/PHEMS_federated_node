{
  "openapi": "3.0.2",
  "info": {
    "description": "Federated Node",
    "title": "Federated Node",
    "version": "0.0.1"
  },
  "servers":[
    {
      "url": "/",
      "description": "Live service"
    },
    {
      "url": "http://127.0.0.1:5000",
      "description": "Local server"
    }
  ],
  "tags": [
    {
      "name": "Datasets",
      "description": "Datasets-related read/write endpoints"
    },
    {
      "name": "Tasks",
      "description": "Tasks-related endpoints"
    },
    {
      "name": "Admin",
      "description": "Admin-only endpoints"
    },
    {
      "name": "General",
      "description": "General use endpoints. No auth needed"
    },
    {
      "name": "Tokens",
      "description": "Endpoints related to the token retrieval from 3rd parties"
    }
  ],
  "paths":{
    "/datasets":{
      "get": {
        "operationId": "getDataset",
        "tags": ["Datasets"],
        "summary": "List all datasets available to the user",
        "responses": {
          "200":{
            "$ref": "#/components/responses/DatasetList"
          },
          "400":{
            "$ref": "#/components/responses/InvalidBody"
          },
          "401":{
            "$ref": "#/components/responses/Unauthenticated"
          },
          "403":{
            "$ref": "#/components/responses/Unauthorized"
          },
          "500":{
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "post":{
        "operationId": "postDataset",
        "tags": ["Datasets"],
        "summary": "Create a new dataset that the Federated Node can fetch data from",
        "requestBody": {
          "content": {
            "application/json":{
              "schema":{
                "$ref": "#/components/schemas/DatasetPostBody"
              }
            }
          }
        },
        "responses":{
          "201":{
            "$ref": "#/components/responses/DatasetPost"
          },
          "400":{
            "$ref": "#/components/responses/InvalidBody"
          },
          "401":{
            "$ref": "#/components/responses/Unauthenticated"
          },
          "403":{
            "$ref": "#/components/responses/Unauthorized"
          },
          "404":{
            "$ref": "#/components/responses/NotFound"
          },
          "500":{
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/datasets/{id}": {
      "get": {
        "operationId": "getDatasetById",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema":{"type": "integer"},
            "required": true
          },
          {
            "in": "header",
            "name": "project_name",
            "schema":{"type": "string"},
            "required": false,
            "description": "Used by non admin users. The value should match the project decalred on the roken_transfer endpoint"
          }
        ],
        "tags": ["Datasets"],
        "summary": "List all datasets available to the user",
        "responses": {
          "200":{
            "$ref": "#/components/responses/DatasetById"
          },
          "401":{
            "$ref": "#/components/responses/Unauthenticated"
          },
          "403":{
            "$ref": "#/components/responses/Unauthorized"
          },
          "404":{
            "$ref": "#/components/responses/NotFound"
          },
          "500":{
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/datasets/{id}/catalogue": {
      "get": {
        "operationId": "getDatasetCatalogue",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema":{"type": "integer"},
            "required": true
          },
          {
            "in": "header",
            "name": "project_name",
            "schema":{"type": "string"},
            "required": false,
            "description": "Used by non admin users. The value should match the project decalred on the roken_transfer endpoint"
          }
        ],
        "tags": ["Datasets"],
        "summary": "List all datasets available to the user",
        "responses": {
          "200":{
            "$ref": "#/components/responses/DatasetCatalogue"
          },
          "401":{
            "$ref": "#/components/responses/Unauthenticated"
          },
          "403":{
            "$ref": "#/components/responses/Unauthorized"
          },
          "404":{
            "$ref": "#/components/responses/NotFound"
          },
          "500":{
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/datasets/{id}/dictionaries": {
      "get": {
        "operationId": "getDatasetDictionaries",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema":{"type": "integer"},
            "required": true
          },
          {
            "in": "header",
            "name": "project_name",
            "schema":{"type": "string"},
            "required": false,
            "description": "Used by non admin users. The value should match the project decalred on the roken_transfer endpoint"
          }
        ],
        "tags": ["Datasets"],
        "summary": "List all datasets available to the user",
        "responses": {
          "200":{
            "$ref": "#/components/responses/DatasetDictionary"
          },
          "401":{
            "$ref": "#/components/responses/Unauthenticated"
          },
          "403":{
            "$ref": "#/components/responses/Unauthorized"
          },
          "404":{
            "$ref": "#/components/responses/NotFound"
          },
          "500":{
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/datasets/{id}/dictionaries/{table_name}": {
      "get": {
        "operationId": "getDatasetDictionariesTable",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema":{"type": "integer"},
            "required": true
          },
          {
            "in": "path",
            "name": "table_name",
            "schema":{"type": "string"},
            "required": true
          },
          {
            "in": "header",
            "name": "project_name",
            "schema":{"type": "string"},
            "required": false,
            "description": "Used by non admin users. The value should match the project decalred on the roken_transfer endpoint"
          }
        ],
        "tags": ["Datasets"],
        "summary": "List all datasets available to the user",
        "responses": {
          "200":{
            "$ref": "#/components/responses/DatasetDictionaryTable"
          },
          "401":{
            "$ref": "#/components/responses/Unauthenticated"
          },
          "404":{
            "$ref": "#/components/responses/NotFound"
          },
          "403":{
            "$ref": "#/components/responses/Unauthorized"
          },
          "500":{
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/datasets/token_transfer": {
      "post": {
        "operationId": "post_transfer_token",
        "tags": ["Tokens"],
        "summary": "Endpoint to create a user's permission for a dataset, and returns a token for it",
        "requestBody": {
          "content": {
            "application/json":{
              "schema":{
                "$ref": "#/components/schemas/TokenPostBody"
              }
            }
          }
        },
        "responses":{
          "201":{
            "$ref": "#/components/responses/TokenResponse"
          },
          "400":{
            "$ref": "#/components/responses/InvalidBody"
          },
          "401":{
            "$ref": "#/components/responses/Unauthenticated"
          },
          "403":{
            "$ref": "#/components/responses/Unauthorized"
          },
          "500":{
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/datasets/selection/beacon": {
      "post": {
        "operationId": "select_beacon",
        "tags": ["Datasets"],
        "summary": "Endpoint to check if a given query is valid",
        "requestBody": {
          "content": {
            "application/json":{
              "schema":{
                "$ref": "#/components/schemas/BeaconPostBody"
              }
            }
          }
        },
        "responses":{
          "201":{
            "$ref": "#/components/responses/SelectBeaconPost"
          },
          "401":{
            "$ref": "#/components/responses/Unauthenticated"
          },
          "403":{
            "$ref": "#/components/responses/Unauthorized"
          },
          "500":{
            "$ref": "#/components/responses/DBConnectionFailed"
          }
        }
      }
    },
    "/tasks/{id}": {
      "get": {
        "operationId": "get_task_by_id",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Unique task identifier",
            "required": true,
            "schema": {"type": "integer"}
          }
        ],
        "tags": ["Tasks"],
        "summary": "Get a single task by its id",
        "responses": {
          "200": {
            "$ref": "#/components/responses/Task"
          },
          "401":{
            "$ref": "#/components/responses/Unauthenticated"
          },
          "403":{
            "$ref": "#/components/responses/Unauthorized"
          },
          "404":{
            "$ref": "#/components/responses/NotFound"
          },
          "500":{
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/tasks": {
      "get": {
        "operationId": "get_tasks",
        "tags": ["Tasks"],
        "summary": "Get a full list of tasks",
        "responses": {
          "200": {
            "$ref": "#/components/responses/TaskList"
          },
          "401":{
            "$ref": "#/components/responses/Unauthenticated"
          },
          "403":{
            "$ref": "#/components/responses/Unauthorized"
          },
          "404":{
            "$ref": "#/components/responses/NotFound"
          },
          "500":{
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "post": {
        "operationId": "create_task",
        "tags": ["Tasks"],
        "summary": "Queue a new analytics task on a given dataset",
        "requestBody": {
          "content": {
            "application/json":{
              "schema":{
                "$ref": "#/components/schemas/TaskPostBody"
              }
            }
          }
        },
        "responses":{
          "201":{
            "$ref": "#/components/responses/TaskPost"
          },
          "400":{
            "$ref": "#/components/responses/InvalidBody"
          },
          "401":{
            "$ref": "#/components/responses/Unauthenticated"
          },
          "403":{
            "$ref": "#/components/responses/Unauthorized"
          },
          "404":{
            "$ref": "#/components/responses/NotFound"
          },
          "409":{
            "$ref": "#/components/responses/Conflict"
          },
          "500":{
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/tasks/validate": {
      "post": {
        "operationId": "validate_task",
        "tags": ["Tasks"],
        "summary": "Validate a task request. Checks if the docker image can be found, and the overall required fields to create a task",
        "requestBody": {
          "content": {
            "application/json":{
              "schema":{
                "$ref": "#/components/schemas/TaskPostBody"
              }
            }
          }
        },
        "responses":{
          "201":{
            "$ref": "#/components/responses/SimpleOk"
          },
          "400":{
            "$ref": "#/components/responses/InvalidBody"
          },
          "401":{
            "$ref": "#/components/responses/Unauthenticated"
          },
          "403":{
            "$ref": "#/components/responses/Unauthorized"
          },
          "500":{
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/tasks/{id}/cancel": {
      "post": {
        "operationId": "cancel_task",
        "tags": ["Tasks"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Unique task identifier",
            "required": true,
            "schema": {"type": "integer"}
          }
        ],
        "summary": "Cancel a running task",
        "responses":{
          "201":{
            "$ref": "#/components/responses/SimpleOk"
          },
          "401":{
            "$ref": "#/components/responses/Unauthenticated"
          },
          "403":{
            "$ref": "#/components/responses/Unauthorized"
          },
          "404":{
            "$ref": "#/components/responses/NotFound"
          },
          "500":{
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/tasks/{id}/results": {
      "get": {
        "operationId": "get_task_results",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Unique task identifier",
            "required": true,
            "schema": {"type": "integer"}
          }
        ],
        "tags": ["Tasks"],
        "summary": "Get task results if available",
        "responses":{
          "200":{
            "$ref": "#/components/responses/TaskResults"
          },
          "401":{
            "$ref": "#/components/responses/Unauthenticated"
          },
          "403":{
            "$ref": "#/components/responses/Unauthorized"
          },
          "404":{
            "$ref": "#/components/responses/NotFound"
          },
          "500":{
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/login": {
      "post": {
        "operationId": "login",
        "security": [],
        "tags": ["General"],
        "summary": "Login with set of credentials (only admins can have them)",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema":{
                "$ref": "#/components/schemas/LoginBody"
              }
            }
          }
        },
        "responses":{
          "201":{
            "$ref": "#/components/responses/TokenResponse"
          },
          "401":{
            "$ref": "#/components/responses/Unauthenticated"
          }
        }
      }
    },
    "/audit": {
      "get": {
        "operationId": "get_audit",
        "parameters": [
          {
            "in": "query",
            "description": "Filter by event time equal to",
            "name": "event_time",
            "schema": {"type": "string"}
          },
          {
            "in": "query",
            "description": "Filter by event time greater than or equal to",
            "name": "event_time__gte",
            "schema": {"type": "string"}
          },
          {
            "in": "query",
            "description": "Filter by event time lower than or equal to",
            "name": "event_time__lte",
            "schema": {"type": "string"}
          },
          {
            "in": "query",
            "description": "Filter by response status code",
            "name": "status_code",
            "schema": {"type": "integer"}
          }
        ],
        "tags": ["Admin"],
        "summary": "Login with set of credentials (only admins can have them)",
        "responses":{
          "200":{
            "$ref": "#/components/responses/AuditList"
          },
          "401":{
            "$ref": "#/components/responses/Unauthenticated"
          },
          "403":{
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/health_check": {
      "get": {
        "operationId": "health_check",
        "security": [],
        "tags": ["General"],
        "summary": "Health check with keycloak's availability",
        "responses":{
          "200":{
            "$ref": "#/components/responses/health_check"
          },
          "500":{
            "$ref": "#/components/responses/500_health_check"
          }
        }
      }
    }
  },
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "components":{
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    },
    "parameters": {},
    "responses": {
      "DatasetPost": {
        "description": "Successfully added",
        "content": {
          "application/json":{
            "schema":{
              "type": "object",
              "properties": {
                "dataset_id": {"type": "integer"}
              }
            }
          }
        }
      },
      "DatasetById": {
        "description": "Successfully added",
        "content": {
          "application/json":{
            "schema":{
              "$ref": "#/components/schemas/DatasetById"
            }
          }
        }
      },
      "DatasetList": {
        "description": "Successfully added",
        "content": {
          "application/json":{
            "schema":{
              "type": "object",
              "properties": {
                "datasets":{
                  "type": "array",
                  "items":{
                    "$ref": "#/components/schemas/DatasetById"
                  }
                }
              }
            }
          }
        }
      },
      "DatasetCatalogue": {
        "description": "Successfully added",
        "content": {
          "application/json":{
            "schema":{
              "type": "array",
              "items":{
                "$ref": "#/components/schemas/DatasetCatalogue"
              }
            }
          }
        }
      },
      "DatasetDictionary": {
        "description": "Successfully added",
        "content": {
          "application/json":{
            "schema":{
              "type": "array",
              "items":{
                "$ref": "#/components/schemas/DatasetDictionary"
              }
            }
          }
        }
      },
      "DatasetDictionaryTable": {
        "description": "Successfully added",
        "content": {
          "application/json":{
            "schema":{
              "$ref": "#/components/schemas/DatasetDictionary"
            }
          }
        }
      },
      "Task": {
        "description": "Task description",
        "content": {
          "application/json":{
            "schema":{
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/TaskById"
              }
            }
          }
        }
      },
      "TaskList": {
        "description": "List of tasks",
        "content": {
          "application/json":{
            "schema":{
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/TaskById"
              }
            }
          }
        }
      },
      "TaskPost": {
        "description": "Successfully added",
        "content": {
          "application/json":{
            "schema":{
              "type": "object",
              "properties": {
                "task_id": {
                  "type": "string",
                  "example": "1"
                }
              }
            }
          }
        }
      },
      "TaskResults": {
        "description": "Successfully added",
        "content": {
          "application/zip":{
            "schema":{
              "type": "string",
              "format": "binary"
            }
          }
        }
      },
      "TokenResponse": {
        "description": "Token created",
        "content": {
          "application/json":{
            "schema":{
              "type": "object",
              "properties": {
                "token": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "SelectBeaconPost": {
        "description": "Successful beacon. Query is correct",
        "content": {
          "application/json":{
            "schema":{
              "type": "object",
              "properties": {
                "query": {"type": "string", "example": "SELECT * FROM patients;"},
                "result": {"type": "string", "example": "Ok"}
              }
            }
          }
        }
      },
      "SimpleOk": {
        "description": "Simple text ok response",
        "content": {
          "plain-text":{
            "example": "Ok"
          }
        }
      },
      "AuditList": {
        "description": "List of actions performed against the webserver",
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items":{
                "type": "object",
                "properties": {
                  "api_function": {"type": "string", "example": "get_datasets"},
                  "details": {"type": "string", "example": "Requested by cea6868d-26b6-4e96-95d7-4aba8df7d06e - user@email.com"},
                  "endpoint": {"type": "string", "example": "/datasets"},
                  "event_time": {"type": "string", "example": "Thu, 14 Mar 2024 11:45:36 GMT"},
                  "http_method": {"type": "string", "example": "GET"},
                  "id": {"type": "integer", "example": 1},
                  "ip_address": {"type": "string", "example": "15.24.87.9"},
                  "requested_by": {"type": "string", "example": "cea6868d-26b6-4e96-95d7-4aba8df7d06e"},
                  "status_code": {"type": "integer", "example": 200}
                }
              }
            }
          }
        }
      },
      "NotFound": {
        "description": "Not found."
      },
      "InvalidBody": {
        "description": "The request body cannot be parsed or is missing required values."
      },
      "Unauthenticated": {
        "description": "Unauthenticated."
      },
      "Unauthorized": {
        "description": "Unauthorized."
      },
      "InternalError": {
        "description": "An internal error occurred."
      },
      "DBConnectionFailed": {
        "description": "Could not connect to the database."
      },
      "Conflict": {
        "description": "Conflict. Resource already exists",
        "content": {
          "application/json":{
            "schema":{
              "type": "object",
              "properties": {
                "error": { "type": "string"}
              },
              "example": {
                "error": "Pod is already running"
              }
            }
          }
        }
      },
      "health_check":{
        "description": "Service healthy",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "keycloak": { "type": "boolean" },
                "status": { "type": "string", "example": "ok" }
              }
            }
          }
        }
      },
      "500_health_check":{
        "description": "Service unhealthy",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "keycloak": { "type": "boolean", "example": false },
                "status": { "type": "string", "example": "non operational" }
              }
            }
          }
        }
      }
    },
    "schemas":{
      "DatasetPostBody": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Human-readable name for the dataset",
            "example": "Blood cancer database",
            "maxLength": 256
          },
          "host": {
            "type": "string",
            "description": "Url where the database is hosted at",
            "example": "http://somewhere",
            "maxLength": 256
          },
          "port": {
            "type": "number",
            "description": "Port for the host field",
            "example": 5432
          },
          "username": {
            "type": "string",
            "description": "Username for the Federated Node to access the DB",
            "example": "usernameDB"
          },
          "password": {
            "type": "string",
            "description": "Password for the Federated Node to access the DB",
            "example": "password"
          },
          "type": {
            "type": "string",
            "description": "Type of DB engine",
            "oneOf": [
              {"type": "string", "example": "postgres"},
              {"type": "string", "example": "mssql"}
            ]
          },
          "catalogue": {
            "$ref": "#/components/schemas/CataloguePostBody"
          },
          "dictionaries": {
            "$ref": "#/components/schemas/DictionariesPostBody"
          }
        },
        "required": [
          "name", "username", "password", "host"
        ]
      },
      "DatasetById": {
        "type": "object",
        "properties": {
          "id": {"type": "integer", "example": 1},
          "host": {"type": "string", "example": "http://dblocation"},
          "port": {"type": "integer", "example": 5432},
          "name": {"type": "string", "example": "Blood Cancer Database"},
          "type": {"type": "string", "example": "mssql"}
        }
      },
      "DatasetCatalogue": {
        "type": "object",
        "properties": {
          "id": {"type": "integer", "example": 1},
          "created_at": {"type": "string", "example": "Mon, 19 Feb 2024 10:00:45 GMT"},
          "updated_at": {"type": "string", "example": "Mon, 19 Feb 2024 10:00:45 GMT"},
          "dataset_id": {"type": "integer", "example": 1},
          "description": {"type": "string", "example": "Blood Analysis results"},
          "title": {"type": "string", "example": "Blood Analysis"},
          "version": {"type": "integer", "example": 1}
        }
      },
      "DatasetDictionary": {
        "type": "object",
        "properties": {
          "id": {"type": "integer", "example": 1},
          "created_at": {"type": "string", "example": "Mon, 19 Feb 2024 10:00:45 GMT"},
          "updated_at": {"type": "string", "example": "Mon, 19 Feb 2024 10:00:45 GMT"},
          "dataset_id": {"type": "integer", "example": 1},
          "description": {"type": "string", "maxLength": 4096, "example": "Blood Analysis results"},
          "field_name": {"type": "string", "maxLength": 256, "example": "glucose_perc"},
          "table_name": {"type": "string", "maxLength": 256, "example": "analysis"},
          "label": {"type": "string", "maxLength": 256}
        }
      },
      "CataloguePostBody": {
        "type": "object",
        "properties": {
          "title":{
            "maxLength": 256,
            "example": "Catalogue 1"
          },
          "description": {
            "maxLength": 4096,
            "example": ""
          }
        }
      },
      "DictionariesPostBody": {
        "type": "array",
        "items":{
          "type": "object",
          "properties": {
            "table_name":{
              "maxLength": 256,
              "example": "patient"
            },
			      "description": {
              "maxLength": 4096,
              "example": "Patients' general information"
            }
          }
        }
      },
      "TokenPostBody": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "maxLength": 256,
            "example": "Data Access Request 1"
          },
          "project_name": {
            "type": "string",
            "maxLength": 256,
            "example": "eu_research_2024"
          },
          "requested_by": {
            "type": "object",
            "properties": {
              "email": {
                "type": "string",
                "maxLength": 256,
                "example": "user@email.com"
              }
            },
            "required": ["email"]
          },
          "description": {
            "type": "string",
            "maxLength": 4096,
            "description": "Project/Data access request description"
          },
          "proj_start": {
            "type": "string",
            "example": "2024-02-10"
          },
          "proj_end": {
            "type": "string",
            "example": "2025-02-25"
          },
          "dataset_id": {
            "type": "string",
            "example": "1"
          }
        },
        "required": [
          "title",
          "project_name",
          "requested_by",
          "description",
          "dataset_id",
          "proj_start",
          "proj_end"
        ]
      },
      "BeaconPostBody": {
        "type": "object",
        "properties": {
          "query":{
            "type": "string",
            "example": "SELECT col1, col2 FROM table;"
          },
          "dataset_id":{
            "type": "integer",
            "example": 1
          }
        },
        "required": [
          "query", "dataset_id"
        ]
      },
      "LoginBody": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string"
          },
          "password": {
            "type": "string"
          }
        }
      },
      "TaskPostBody": {
        "type": "object",
        "properties": {
          "name": { "type": "string", "maxLength": 256},
          "description": { "type": "string", "maxLength": 4096},
          "executors": {
            "type": "object",
            "properties": {
              "image":{
                "type": "string", "maxLength": 256
              },
              "command":{
                "type": "array",
                "items":{
                  "type": "string"
                }
              },
              "env":{
                "type": "object",
                "example": {
                  "LOGS": "debug",
                  "PARAMETER1": 2
                }
              }
            },
            "required": ["image"]
          },
          "tags": {
            "type": "object",
            "properties": {
              "dataset_id":{ "type": "string" }
            },
            "example": {
              "dataset_id": 1,
              "custom_tag": "value"
            },
            "required": ["dataset_id"]
          },
          "inputs": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "path": { "type": "string" },
                "url": { "type": "string" }
              }
            }
          },
          "outputs": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "path": { "type": "string" },
                "url": { "type": "string" },
                "type": { "type": "string" }
              }
            }
          },
          "resources": {
            "type": "object",
            "properties": {
              "cpu_cores": { "type": "integer" },
              "preemptible": { "type": "boolean" },
              "ram_gb": { "type": "integer" },
              "disk_gb": { "type": "integer" },
              "zones": { "type": "string" }
            }
          },
          "volumes": {
            "type": "array",
            "items": { "type": "string" }
          }
        },
        "required": ["executors", "name", "tags"]
      },
      "TaskById": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "1"
          },
          "created_at": {
            "type": "string",
            "example": "Mon, 19 Feb 2024 10:41:54 GMT"
          },
          "description": {
            "type": "string",
            "example": "Custom task description"
          },
          "docker_image": {
            "type": "string",
            "example": "registry/image:1.2"
          },
          "dataset_id": {
            "type": "integer",
            "example": 1
          },
          "requested_by": {
            "type": "string",
            "example": "aabf657d-e912-43ab-8df7-924731b0f74f"
          },
          "status": {
            "type": "object",
            "properties": {
              "running": {"type": "object"},
              "terminated": {"type": "object"},
              "waiting": {"type": "object"}
            }
          },
          "title": {
            "type": "string",
            "example": "Average age analysis"
          },
          "updated_at": {
            "type": "string",
            "example": "Mon, 19 Feb 2024 11:41:54 GMT"
          }
        }
      }
    }
  }
}
