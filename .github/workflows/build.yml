name: Build Docker Image
run-name: Building images
on:
  push:
    tags:
      - '**'
    branches:
      - main
    paths-ignore:
      - '*.md'
      - 'README'
      - 'LICENSE'
      - 'DEPLOYMENT'
      - 'images/**'
      - '.github/ISSUE_TEMPLATE/**'
      - '.github/PULL_REQUEST_TEMPLATE/**'
      - 'Makefile'
      - '.gitignore'
      - 'sub-license/**'
      - 'environment/*.md'
  pull_request:
    branches:
      - main
    paths-ignore:
      - '*.md'
      - 'README'
      - 'LICENSE'
      - 'DEPLOYMENT'
      - 'images/**'
      - '.github/ISSUE_TEMPLATE/**'
      - '.github/PULL_REQUEST_TEMPLATE/**'
      - 'Makefile'
      - '.gitignore'
      - 'sub-license/**'
      - 'environment/*.md'
env:
  TAG: ''
  OWNER_LC: ''
  HELM_CHANNEL: stable
  IS_TAG: ${{ github.ref_type == 'tag' }}
  IS_NOT_TAG: ${{ github.ref_type != 'tag' }}
  DEV_BUILD: ${{ github.ref_type != 'tag' && github.ref != 'refs/heads/main' }}

jobs:
  linters:
    if: github.ref_type != 'tag'
    defaults:
      run:
        shell: bash
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Check for vulnerabilities
        run: |
          docker run --entrypoint /bin/sh \
            -v ./webserver/app/Pipfile:/app/Pipfile \
            -v ./webserver/app/Pipfile.lock:/app/Pipfile.lock \
            -v ./webserver/vuln.sh:/vuln.sh \
            python:3.12 \
            /vuln.sh

      - name: Run pylint
        run: |
          make pylint

      - name: Run hadolint
        run: |
          make hadolint
  tests:
    needs: linters
    defaults:
      run:
        shell: bash
    runs-on: ubuntu-latest
    if: github.env.IS_NOT_TAG
    steps:
      - uses: actions/checkout@v4

      - name: Run Python Tests
        working-directory: webserver
        run: |
          make tests_ci

      - uses: irongut/CodeCoverageSummary@v1.3.0
        name: Code Coverage Summary Report
        with:
          filename: artifacts/coverage.xml
          fail_below_min: true
          thresholds: '60 80'
  build:
    needs: tests
    if: github.env.IS_NOT_TAG
    defaults:
      run:
        shell: bash
    runs-on: ubuntu-latest
    outputs:
      chart_version: ${{ steps.chart_version.outputs.CHART_VERSION }}
      tag: ${{ steps.chart_version.outputs.TAG }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Set Tags from Chart.yaml
        id: chart_version
        working-directory: k8s/federated-node
        run: |
          echo "Setting version according to the Chart.yaml"

          version=$(grep 'version:.*' Chart.yaml | sed 's/^.*: //')
          echo "Chart version: ${version}"
          appVersion=$(grep 'appVersion:.*' Chart.yaml | sed 's/^.*: \"//'| sed 's/\"//')
          echo "Chart appVersion: ${appVersion}"

          echo "CHART_VERSION=${version}" >> ${GITHUB_OUTPUT}

          echo "TAG=${appVersion}" >> ${GITHUB_OUTPUT}
          echo "TAG=${appVersion}" >> ${GITHUB_ENV}

      - name: Set Tag for dev branches
        if: github.env.DEV_BUILD
        run: echo "TAG=${TAG}-${GITHUB_SHA::6}" >> ${GITHUB_ENV}

      # Need to get a registry where to push the image
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ vars.DOCKER_CR }}
          username: ${{ github.actor }}
          password: ${{ secrets.DOCKER_TOKEN }}
      - name: set lower case owner name
        run: |
          echo "OWNER_LC=${OWNER,,}" >> ${GITHUB_ENV}
        env:
          OWNER: '${{ github.repository_owner }}'
      - name: Build and push Flask image
        uses: docker/build-push-action@v5
        with:
          context: webserver
          file: webserver/build/Dockerfile
          tags: ${{ vars.DOCKER_CR }}/${{ env.OWNER_LC }}/federated_node_run:${{ env.TAG }}
          push: true
      - name: Build and push Keycloak image
        uses: docker/build-push-action@v5
        with:
          context: build/keycloak
          file: build/keycloak/keycloak.Dockerfile
          tags: ${{ vars.DOCKER_CR }}/${{ env.OWNER_LC }}/federated_keycloak:${{ env.TAG }}
          push: true
      - name: Build and push Cleaner image
        uses: docker/build-push-action@v5
        with:
          context: build/cleanup-results
          file: build/cleanup-results/Dockerfile
          tags: ${{ vars.DOCKER_CR }}/${{ env.OWNER_LC }}/results_cleaner:${{ env.TAG }}
          push: true
      - name: Build and push DB initialiser image
        uses: docker/build-push-action@v5
        with:
          context: build/db-init
          file: build/db-init/Dockerfile
          tags: ${{ vars.DOCKER_CR }}/${{ env.OWNER_LC }}/db_init:${{ env.TAG }}
          push: true
      - name: Build and push KC initialiser image
        uses: docker/build-push-action@v5
        with:
          context: build/kc-init
          file: build/kc-init/Dockerfile
          tags: ${{ vars.DOCKER_CR }}/${{ env.OWNER_LC }}/keycloak_initializer:${{ env.TAG }}
          push: true
  release:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
    - uses: actions/checkout@v4

    - name: Build helm archive
      working-directory: k8s/federated-node
      run: |
        helm package . -d ../../artifacts/

    - name: Set helm channel to develop for dev branches
      if: github.ref != 'refs/heads/main' || github.ref_type != 'tag'
      run: echo "HELM_CHANNEL=develop" >> ${GITHUB_ENV}

    - name: Push to GitLab Package Artifact
      run: |
        set -e
        curl --request POST \
          --form 'chart=@artifacts/federated-node-${{ needs.build.outputs.chart_version }}.tgz' \
          --user ${{ vars.USER_HELM }}:${{ secrets.HELM_TOKEN }} \
          ${{ vars.HELM_REPO }}/helm/api/${{ env.HELM_CHANNEL }}/charts

    - name: Publish Release
      uses: ncipollo/release-action@v1
      if: github.env.IS_TAG
      with:
        artifacts: "artifacts/federated-node-${{ needs.build.outputs.chart_version }}.tgz"
        tag: ${{ needs.build.outputs.chart_version }}
        skipIfReleaseExists: true
