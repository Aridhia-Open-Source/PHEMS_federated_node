name: Build Docker Image
run-name: Building images
on:
  workflow_dispatch:
  push:
    tags:
      - '**'
    branches:
      - main
      - develop
    paths-ignore:
      - '*.md'
      - 'README'
      - 'LICENSE'
      - 'DEPLOYMENT'
      - 'images/**'
      - '.github/ISSUE_TEMPLATE/**'
      - '.github/PULL_REQUEST_TEMPLATE/**'
      - 'Makefile'
      - '.gitignore'
      - 'sub-license/**'
      - 'environment/*.md'
      - 'install_argocd/**'
  pull_request:
    branches:
      - main
      - develop
    paths-ignore:
      - '*.md'
      - 'README'
      - 'LICENSE'
      - 'DEPLOYMENT'
      - 'images/**'
      - '.github/ISSUE_TEMPLATE/**'
      - '.github/PULL_REQUEST_TEMPLATE/**'
      - 'Makefile'
      - '.gitignore'
      - 'sub-license/**'
      - 'environment/*.md'
      - 'install_argocd/**'
env:
  TAG: ''
  OWNER_LC: ''
  HELM_CHANNEL: stable
  IS_TAG: ${{ github.ref_type == 'tag' }}
  DEV_BUILD: ${{ github.ref_type != 'tag' && github.ref != 'refs/heads/main' }}

permissions:
  contents: write
  packages: write

jobs:
  init:
    runs-on: ubuntu-latest
    outputs:
      is_tag: ${{ steps.vars.outputs.IS_TAG }}
      dev_build: ${{ steps.vars.outputs.DEV_BUILD }}
      chart_version: ${{ steps.vars.outputs.CHART_VERSION }}
      tag: ${{ steps.vars.outputs.TAG }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setting global values
        id: vars
        run: |
          echo "IS_TAG=${{ env.IS_TAG }}" >> ${GITHUB_OUTPUT}
          echo "DEV_BUILD=${{ env.DEV_BUILD }}" >> ${GITHUB_OUTPUT}

          echo "Setting version according to the Chart.yaml"
          cd k8s/federated-node

          version=$(grep '^version:.*' Chart.yaml | sed 's/^.*: //')
          echo "Chart version: ${version}"
          appVersion=$(grep '^appVersion:.*' Chart.yaml | sed 's/^.*: \"//'| sed 's/\"//')
          echo "Chart appVersion: ${appVersion}"

          if [[ "${{ env.DEV_BUILD }}" == "false" ]]; then
            echo "CHART_VERSION=${version}" >> ${GITHUB_OUTPUT}
            echo "TAG=${appVersion}" >> ${GITHUB_OUTPUT}
          else
            echo "CHART_VERSION=${version}-v${GITHUB_SHA::6}" >> ${GITHUB_OUTPUT}
            echo "TAG=${appVersion}-v${GITHUB_SHA::6}" >> ${GITHUB_OUTPUT}
          fi
  linters:
    needs: init
    if: needs.init.outputs.is_tag == 'false'
    defaults:
      run:
        shell: bash
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Run pylint
        run: |
          make pylint

      - name: Run hadolint
        run: |
          make hadolint
  tests:
    needs:
      - init
      - linters
    defaults:
      run:
        shell: bash
    runs-on: ubuntu-latest
    if: needs.init.outputs.is_tag == 'false'
    steps:
      - uses: actions/checkout@v4

      - name: Run Python Tests
        working-directory: webserver
        run: |
          make tests_ci

      - uses: irongut/CodeCoverageSummary@v1.3.0
        name: Code Coverage Summary Report
        with:
          filename: artifacts/coverage.xml
          fail_below_min: true
          thresholds: '60 80'
  build:
    needs:
      - init
      - tests
    if: needs.init.outputs.is_tag == 'false'
    defaults:
      run:
        shell: bash
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Need to get a registry where to push the image
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ vars.DOCKER_CR }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: set lower case owner name
        run: |
          echo "OWNER_LC=${OWNER,,}" >> ${GITHUB_ENV}
        env:
          OWNER: '${{ github.repository_owner }}'
      - name: Build and push Flask image
        uses: docker/build-push-action@v5
        with:
          context: webserver
          file: webserver/build/Dockerfile
          tags: ${{ vars.DOCKER_CR }}/${{ env.OWNER_LC }}/federated_node_run:${{ needs.init.outputs.tag }}
          push: true
      - name: Build and push Keycloak image
        uses: docker/build-push-action@v5
        with:
          context: build/keycloak
          file: build/keycloak/keycloak.Dockerfile
          tags: ${{ vars.DOCKER_CR }}/${{ env.OWNER_LC }}/federated_keycloak:${{ needs.init.outputs.tag }}
          push: true
      - name: Build and push Alpine image
        uses: docker/build-push-action@v5
        with:
          context: build/alpine
          file: build/alpine/Dockerfile
          tags: ${{ vars.DOCKER_CR }}/${{ env.OWNER_LC }}/alpine:${{ needs.init.outputs.tag }}
          push: true
      - name: Build and push KC initialiser image
        uses: docker/build-push-action@v5
        with:
          context: build/kc-init
          file: build/kc-init/Dockerfile
          tags: ${{ vars.DOCKER_CR }}/${{ env.OWNER_LC }}/keycloak_initializer:${{ needs.init.outputs.tag }}
          push: true
      - name: Build and push DB virtualizer image
        uses: docker/build-push-action@v5
        with:
          context: build/db-connector
          file: build/db-connector/Dockerfile
          tags: ${{ vars.DOCKER_CR }}/${{ env.OWNER_LC }}/db_connector:${{ needs.init.outputs.tag }}
          push: true
  release:
    uses: Aridhia-Open-Source/pipelines/.github/workflows/helm-build.yml@main
    if: always() && !failure() && !cancelled()
    needs:
      - init
      - build
    with:
      VERSION: ${{ needs.init.outputs.chart_version }}
      APP_VERSION: ${{ needs.init.outputs.tag }}
      PATH_BUILD: k8s/federated-node
      CHART_NAME: federated-node
      IS_TAG: ${{ needs.init.outputs.is_tag }}
      HAS_SUBCHART: true
  sumamry:
    needs:
      - init
      - release
    runs-on: ubuntu-latest
    steps:
      - name: Set summary
        run: |
          echo "# Docker Images Tags:" >> $GITHUB_STEP_SUMMARY
          echo "- ${{ needs.init.outputs.tag }}" >> $GITHUB_STEP_SUMMARY
          echo "# Helm Chart:" >> $GITHUB_STEP_SUMMARY
          echo "- federated-node:${{ needs.init.outputs.chart_version }}" >> $GITHUB_STEP_SUMMARY
